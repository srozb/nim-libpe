import def_enums
import hdr_dos
import hdr_coff
import hdr_optional
import imports
import exports
import hashes
import resources
import directories
import sections

defineEnum(pe_option_e)

const
  MAX_DIRECTORIES* = 16
  MAX_SECTIONS* = 96
  MAGIC_MZ* = 0x00005A4D
  MAX_DLL_NAME* = 256
  MAX_FUNCTION_NAME* = 512
  IMAGE_ORDINAL_FLAG32* = 0x80000000'u32
  IMAGE_ORDINAL_FLAG64* = 0x8000000000000000'u64
  SIGNATURE_NE* = 0x0000454E
  SIGNATURE_PE* = 0x00004550
  LIBPE_OPT_NOCLOSE_FD* = 1.pe_option_e  # Keeps stream open for further usage.
  LIBPE_OPT_OPEN_RW* = 2.pe_option_e  # Open file for read and writing

type
  Sections* = array[0..MAX_SECTIONS, ptr IMAGE_SECTION_HEADER]
  Directories* = array[0..MAX_DIRECTORIES, ptr IMAGE_DATA_DIRECTORY]

  pe_options_e* = uint16  ##   bitmasked pe_option_e values

  pe_file_t* {.bycopy.} = object
    dos_hdr*: ptr IMAGE_DOS_HEADER  ##   DOS header
    signature*: uint32  ##   Signature
    coff_hdr*: ptr IMAGE_COFF_HEADER  ##   COFF header
    optional_hdr_ptr*: pointer  ##   Optional header
    optional_hdr*: IMAGE_OPTIONAL_HEADER  ##   Directories
    num_directories*: uint32  ##   Directories
    directories_ptr*: pointer
    directories*: ptr Directories  ##   array up to MAX_DIRECTORIES  ##      Sections
    num_sections*: uint16  ##   array up to MAX_DIRECTORIES  ##      Sections
    sections_ptr*: pointer
    sections*: ptr Sections  ##   array up to MAX_SECTIONS
    entrypoint*: uint64  ##   array up to MAX_SECTIONS
    imagebase*: uint64

  pe_cached_data_t* {.bycopy.} = object
    imports*: ptr pe_imports_t  ##   Parsed directories
    exports*: ptr pe_exports_t  ##   Hashes
    hash_headers*: ptr pe_hash_headers_t  ##   Hashes
    hash_sections*: ptr pe_hash_sections_t
    hash_file*: ptr pe_hash_t  ##   Resources
    resources*: ptr pe_resources_t  ##   Resources
  
  pe_ctx* {.bycopy.} = object
    stream*: File
    path*: cstring
    map_addr*: pointer
    map_size*: clong
    map_end*: ptr uint
    pe*: pe_file_t
    cached_data*: pe_cached_data_t

  pe_ctx_t* = pe_ctx

proc pe_machine_type_name*(`type`: MachineType): cstring =
  result = "IMAGE_FILE_MACHINE_UNKNOWN".cstring
  type 
    Machine = tuple
      entryId: MachineType
      name: string

  const entries: seq[Machine] = @[  # TODO: Macro
    (IMAGE_FILE_MACHINE_AM33, "IMAGE_FILE_MACHINE_AM33"),
    (IMAGE_FILE_MACHINE_AMD64, "IMAGE_FILE_MACHINE_AMD64"),
    (IMAGE_FILE_MACHINE_ARM, "IMAGE_FILE_MACHINE_ARM"),
    (IMAGE_FILE_MACHINE_ARMV7, "IMAGE_FILE_MACHINE_ARMV7"),
    (IMAGE_FILE_MACHINE_CEE, "IMAGE_FILE_MACHINE_CEE"),
    (IMAGE_FILE_MACHINE_EBC, "IMAGE_FILE_MACHINE_EBC"),
    (IMAGE_FILE_MACHINE_I386, "IMAGE_FILE_MACHINE_I386"),
    (IMAGE_FILE_MACHINE_IA64, "IMAGE_FILE_MACHINE_IA64"),
    (IMAGE_FILE_MACHINE_M32R, "IMAGE_FILE_MACHINE_M32R"),
    (IMAGE_FILE_MACHINE_MIPS16, "IMAGE_FILE_MACHINE_MIPS16"),
    (IMAGE_FILE_MACHINE_MIPSFPU, "IMAGE_FILE_MACHINE_MIPSFPU"),
    (IMAGE_FILE_MACHINE_MIPSFPU16, "IMAGE_FILE_MACHINE_MIPSFPU16"),
    (IMAGE_FILE_MACHINE_POWERPC, "IMAGE_FILE_MACHINE_POWERPC"),
    (IMAGE_FILE_MACHINE_POWERPCFP, "IMAGE_FILE_MACHINE_POWERPCFP"),
    (IMAGE_FILE_MACHINE_R4000, "IMAGE_FILE_MACHINE_R4000"),
    (IMAGE_FILE_MACHINE_SH3, "IMAGE_FILE_MACHINE_SH3"),
    (IMAGE_FILE_MACHINE_SH3DSP, "IMAGE_FILE_MACHINE_SH3DSP"),
    (IMAGE_FILE_MACHINE_SH4, "IMAGE_FILE_MACHINE_SH4"),
    (IMAGE_FILE_MACHINE_SH5, "IMAGE_FILE_MACHINE_SH5"),
    (IMAGE_FILE_MACHINE_THUMB, "IMAGE_FILE_MACHINE_THUMB"),
    (IMAGE_FILE_MACHINE_WCEMIPSV2, "IMAGE_FILE_MACHINE_WCEMIPSV2")
  ]

  for e in entries:
    if e.entryId == `type`: return e.name.cstring

proc pe_image_characteristic_name*(characteristic: ImageCharacteristics): cstring =
  type 
    ImageCharacteristicsName = tuple
      entryId: ImageCharacteristics
      name: string

  const entries: seq[ImageCharacteristicsName] = @[
    (IMAGE_FILE_RELOCS_STRIPPED, "IMAGE_FILE_RELOCS_STRIPPED"),
    (IMAGE_FILE_EXECUTABLE_IMAGE, "IMAGE_FILE_EXECUTABLE_IMAGE"),
    (IMAGE_FILE_LINE_NUMS_STRIPPED, "IMAGE_FILE_LINE_NUMS_STRIPPED"),
    (IMAGE_FILE_LOCAL_SYMS_STRIPPED, "IMAGE_FILE_LOCAL_SYMS_STRIPPED"),
    (IMAGE_FILE_AGGRESSIVE_WS_TRIM, "IMAGE_FILE_AGGRESSIVE_WS_TRIM"),
    (IMAGE_FILE_LARGE_ADDRESS_AWARE, "IMAGE_FILE_LARGE_ADDRESS_AWARE"),
    (IMAGE_FILE_RESERVED, "IMAGE_FILE_RESERVED"),
    (IMAGE_FILE_BYTES_REVERSED_LO, "IMAGE_FILE_BYTES_REVERSED_LO"),
    (IMAGE_FILE_32BIT_MACHINE, "IMAGE_FILE_32BIT_MACHINE"),
    (IMAGE_FILE_DEBUG_STRIPPED, "IMAGE_FILE_DEBUG_STRIPPED"),
    (IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP, "IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP"),
    (IMAGE_FILE_NET_RUN_FROM_SWAP, "IMAGE_FILE_NET_RUN_FROM_SWAP"),
    (IMAGE_FILE_SYSTEM, "IMAGE_FILE_SYSTEM"),
    (IMAGE_FILE_DLL, "IMAGE_FILE_DLL"),
    (IMAGE_FILE_UP_SYSTEM_ONLY, "IMAGE_FILE_UP_SYSTEM_ONLY"),
    (IMAGE_FILE_BYTES_REVERSED_HI, "IMAGE_FILE_BYTES_REVERSED_HI")
  ]

  for e in entries:
    if e.entryId == characteristic: return e.name.cstring

proc pe_image_dllcharacteristic_name*(characteristic: ImageDllCharacteristics): cstring =
  type 
    ImageDllCharacteristicsName = tuple
      entryId: ImageDllCharacteristics
      name: string

  const entries: seq[ImageDllCharacteristicsName] = @[
    (IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE, "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE"),
    (IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY, "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY"),
    (IMAGE_DLLCHARACTERISTICS_NX_COMPAT, "IMAGE_DLLCHARACTERISTICS_NX_COMPAT"),
    (IMAGE_DLLCHARACTERISTICS_NO_ISOLATION, "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION"),
    (IMAGE_DLLCHARACTERISTICS_NO_SEH, "IMAGE_DLLCHARACTERISTICS_NO_SEH"),
    (IMAGE_DLLCHARACTERISTICS_NO_BIND, "IMAGE_DLLCHARACTERISTICS_NO_BIND"),
    (IMAGE_DLLCHARACTERISTICS_WDM_DRIVER, "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER"),
    (IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE, "IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE")
  ]

  for e in entries:
    if e.entryId == characteristic: return e.name.cstring

proc pe_windows_subsystem_name*(subsystem: WindowsSubsystem): cstring =
  result = "IMAGE_SUBSYSTEM_UNKNOWN".cstring
  type 
    WindowsSubsystemName = tuple
      entryId: WindowsSubsystem
      name: string

  const entries: seq[WindowsSubsystemName] = @[
    (IMAGE_SUBSYSTEM_NATIVE, "IMAGE_SUBSYSTEM_NATIVE"),
    (IMAGE_SUBSYSTEM_WINDOWS_GUI, "IMAGE_SUBSYSTEM_WINDOWS_GUI"),
    (IMAGE_SUBSYSTEM_WINDOWS_CUI, "IMAGE_SUBSYSTEM_WINDOWS_CUI"),
    (IMAGE_SUBSYSTEM_OS2_CUI, "IMAGE_SUBSYSTEM_OS2_CUI"),
    (IMAGE_SUBSYSTEM_POSIX_CUI, "IMAGE_SUBSYSTEM_POSIX_CUI"),
    (IMAGE_SUBSYSTEM_WINDOWS_CE_GUI, "IMAGE_SUBSYSTEM_WINDOWS_CE_GUI"),
    (IMAGE_SUBSYSTEM_EFI_APPLICATION, "IMAGE_SUBSYSTEM_EFI_APPLICATION"),
    (IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER, "IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER"),
    (IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER, "IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER"),
    (IMAGE_SUBSYSTEM_EFI_ROM, "IMAGE_SUBSYSTEM_EFI_ROM"),
    (IMAGE_SUBSYSTEM_XBOX, "IMAGE_SUBSYSTEM_XBOX"),
    (IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION, "IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION")
  ]

  for e in entries:
    if e.entryId == subsystem: return e.name.cstring

proc pe_directory_name*(entry: ImageDirectoryEntry): cstring =
  type 
    ImageDirectoryEntryName = tuple
      entryId: ImageDirectoryEntry
      name: string

  const entries: seq[ImageDirectoryEntryName] = @[
    (IMAGE_DIRECTORY_ENTRY_EXPORT, "IMAGE_DIRECTORY_ENTRY_EXPORT"),
    (IMAGE_DIRECTORY_ENTRY_IMPORT, "IMAGE_DIRECTORY_ENTRY_IMPORT"),
    (IMAGE_DIRECTORY_ENTRY_RESOURCE, "IMAGE_DIRECTORY_ENTRY_RESOURCE"),
    (IMAGE_DIRECTORY_ENTRY_EXCEPTION, "IMAGE_DIRECTORY_ENTRY_EXCEPTION"),
    (IMAGE_DIRECTORY_ENTRY_SECURITY, "IMAGE_DIRECTORY_ENTRY_SECURITY"),
    (IMAGE_DIRECTORY_ENTRY_BASERELOC, "IMAGE_DIRECTORY_ENTRY_BASERELOC"),
    (IMAGE_DIRECTORY_ENTRY_DEBUG, "IMAGE_DIRECTORY_ENTRY_DEBUG"),
    (IMAGE_DIRECTORY_ENTRY_ARCHITECTURE, "IMAGE_DIRECTORY_ENTRY_ARCHITECTURE"),
    (IMAGE_DIRECTORY_ENTRY_GLOBALPTR, "IMAGE_DIRECTORY_ENTRY_GLOBALPTR"),
    (IMAGE_DIRECTORY_ENTRY_TLS, "IMAGE_DIRECTORY_ENTRY_TLS"),
    (IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG, "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG"),
    (IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT, "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT"),
    (IMAGE_DIRECTORY_ENTRY_IAT, "IMAGE_DIRECTORY_ENTRY_IAT"),
    (IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT, "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT"),
    (IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR, "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR"),
    (IMAGE_DIRECTORY_RESERVED, "IMAGE_DIRECTORY_RESERVED")
  ]

  for e in entries:
    if e.entryId == entry: return e.name.cstring

proc pe_section_characteristic_name*(characteristic: SectionCharacteristics): cstring =
  type 
    SectionCharacteristicsName = tuple
      entryId: SectionCharacteristics
      name: string

  const entries: seq[SectionCharacteristicsName] = @[
    (IMAGE_SCN_TYPE_NO_PAD, "IMAGE_SCN_TYPE_NO_PAD"),
    (IMAGE_SCN_CNT_CODE, "IMAGE_SCN_CNT_CODE"),
    (IMAGE_SCN_CNT_INITIALIZED_DATA, "IMAGE_SCN_CNT_INITIALIZED_DATA"),
    (IMAGE_SCN_CNT_UNINITIALIZED_DATA, "IMAGE_SCN_CNT_UNINITIALIZED_DATA"),
    (IMAGE_SCN_LNK_OTHER, "IMAGE_SCN_LNK_OTHER"),
    (IMAGE_SCN_LNK_INFO, "IMAGE_SCN_LNK_INFO"),
    (IMAGE_SCN_LNK_REMOVE, "IMAGE_SCN_LNK_REMOVE"),
    (IMAGE_SCN_LNK_COMDAT, "IMAGE_SCN_LNK_COMDAT"),
    (IMAGE_SCN_NO_DEFER_SPEC_EXC, "IMAGE_SCN_NO_DEFER_SPEC_EXC"),
    (IMAGE_SCN_GPREL, "IMAGE_SCN_GPREL"),
    (IMAGE_SCN_MEM_PURGEABLE, "IMAGE_SCN_MEM_PURGEABLE"),
    (IMAGE_SCN_MEM_LOCKED, "IMAGE_SCN_MEM_LOCKED"),
    (IMAGE_SCN_MEM_PRELOAD, "IMAGE_SCN_MEM_PRELOAD"),
    (IMAGE_SCN_ALIGN_1BYTES, "IMAGE_SCN_ALIGN_1BYTES"),
    (IMAGE_SCN_ALIGN_2BYTES, "IMAGE_SCN_ALIGN_2BYTES"),
    (IMAGE_SCN_ALIGN_4BYTES, "IMAGE_SCN_ALIGN_4BYTES"),
    (IMAGE_SCN_ALIGN_8BYTES, "IMAGE_SCN_ALIGN_8BYTES"),
    (IMAGE_SCN_ALIGN_16BYTES, "IMAGE_SCN_ALIGN_16BYTES"),
    (IMAGE_SCN_ALIGN_32BYTES, "IMAGE_SCN_ALIGN_32BYTES"),
    (IMAGE_SCN_ALIGN_64BYTES, "IMAGE_SCN_ALIGN_64BYTES"),
    (IMAGE_SCN_ALIGN_128BYTES, "IMAGE_SCN_ALIGN_128BYTES"),
    (IMAGE_SCN_ALIGN_256BYTES, "IMAGE_SCN_ALIGN_256BYTES"),
    (IMAGE_SCN_ALIGN_512BYTES, "IMAGE_SCN_ALIGN_512BYTES"),
    (IMAGE_SCN_ALIGN_1024BYTES, "IMAGE_SCN_ALIGN_1024BYTES"),
    (IMAGE_SCN_ALIGN_2048BYTES, "IMAGE_SCN_ALIGN_2048BYTES"),
    (IMAGE_SCN_ALIGN_4096BYTES, "IMAGE_SCN_ALIGN_4096BYTES"),
    (IMAGE_SCN_ALIGN_8192BYTES, "IMAGE_SCN_ALIGN_8192BYTES"),
    (IMAGE_SCN_LNK_NRELOC_OVFL, "IMAGE_SCN_LNK_NRELOC_OVFL"),
    (IMAGE_SCN_MEM_DISCARDABLE, "IMAGE_SCN_MEM_DISCARDABLE"),
    (IMAGE_SCN_MEM_NOT_CACHED, "IMAGE_SCN_MEM_NOT_CACHED"),
    (IMAGE_SCN_MEM_NOT_PAGED, "IMAGE_SCN_MEM_NOT_PAGED"),
    (IMAGE_SCN_MEM_SHARED, "IMAGE_SCN_MEM_SHARED"),
    (IMAGE_SCN_MEM_EXECUTE, "IMAGE_SCN_MEM_EXECUTE"),
    (IMAGE_SCN_MEM_READ, "IMAGE_SCN_MEM_READ"),
    (IMAGE_SCN_MEM_WRITE, "IMAGE_SCN_MEM_WRITE")
  ]

  for e in entries:
    if e.entryId == characteristic: return e.name.cstring
